using System.Collections.Immutable;

namespace TestDataFactoryGenerator.Generation.Optionals;

internal class OptionalsGenerator : IOptionalsGenerator
{
    private readonly string _indent;

    public OptionalsGenerator(TdfGeneratorConfiguration generatorConfiguration)
    {
        _indent = generatorConfiguration.Indent;
    }

    public IImmutableList<string> GenerateOptionalsCode(bool includeOptionalsCode)
    {
        if (!includeOptionalsCode)
        {
            return [];
        }

        return GenerateNullObjectCode()
            .Prepend(string.Empty)
            .Concat(GenerateOptionCode())
            .Concat(GenerateInternalOptionCode())
            .Concat(GenerateOptionalRefCode())
            .Concat(GenerateOptionalValueCode())
            .ToImmutableList();
    }

    private IImmutableList<string> GenerateNullObjectCode()
    {
        return
        [
            "internal class NullObject",
            "{",
            $"{_indent}public static readonly NullObject Instance = new();",
            string.Empty,
            $"{_indent}private NullObject()",
            $"{_indent}{{",
            $"{_indent}}}",
            "}",
            string.Empty,
        ];
    }

    private IImmutableList<string> GenerateOptionCode()
    {
        return
        [
            "internal enum Option",
            "{",
            $"{_indent}AutoGenerated = 1,",
            $"{_indent}Null = 2,",
            "}",
            string.Empty,
        ];
    }

    private IImmutableList<string> GenerateInternalOptionCode()
    {
        return
        [
            "internal enum InternalOption",
            "{",
            $"{_indent}AutoGenerated = 0,",
            $"{_indent}SpecifiedValue = 1,",
            $"{_indent}Null = 2,",
            "}",
            string.Empty,
        ];
    }

    private IImmutableList<string> GenerateOptionalRefCode()
    {
        return
        [
            "internal struct OptionalRef<T> where T : class",
            "{",
            $"{_indent}private readonly T? _value;",
            string.Empty,
            $"{_indent}private readonly InternalOption _type = InternalOption.AutoGenerated;",
            string.Empty,
            $"{_indent}public OptionalRef(T value)",
            $"{_indent}{{",
            $"{_indent}{_indent}_value = value;",
            $"{_indent}{_indent}_type = InternalOption.SpecifiedValue;",
            $"{_indent}}}",
            string.Empty,
            $"{_indent}public OptionalRef(Option opt)",
            $"{_indent}{{",
            $"{_indent}{_indent}_value = default;",
            $"{_indent}{_indent}_type = opt switch",
            $"{_indent}{_indent}{{",
            $"{_indent}{_indent}{_indent}Option.Null => InternalOption.Null,",
            $"{_indent}{_indent}{_indent}Option.AutoGenerated => InternalOption.AutoGenerated,",
            $"{_indent}{_indent}{_indent}_ => throw new NotImplementedException($\"Can not handle {{opt}}\"),",
            $"{_indent}{_indent}}};",
            $"{_indent}}}",
            string.Empty,
            $"{_indent}public static implicit operator OptionalRef<T>(T value)",
            $"{_indent}{{",
            $"{_indent}{_indent}return new OptionalRef<T>(value);",
            $"{_indent}}}",
            string.Empty,
            $"{_indent}public static implicit operator OptionalRef<T>(Option type)",
            $"{_indent}{{",
            $"{_indent}{_indent}return new OptionalRef<T>(type);",
            $"{_indent}}}",
            string.Empty,
            $"{_indent}public T? Unwrap(Func<T> whenAutoGenerated)",
            $"{_indent}{{",
            $"{_indent}{_indent}return _type switch",
            $"{_indent}{_indent}{{",
            $"{_indent}{_indent}{_indent}InternalOption.SpecifiedValue => _value,",
            $"{_indent}{_indent}{_indent}InternalOption.Null => null,",
            $"{_indent}{_indent}{_indent}InternalOption.AutoGenerated => whenAutoGenerated(),",
            $"{_indent}{_indent}{_indent}_ => throw new InvalidOperationException(),",
            $"{_indent}{_indent}}};",
            $"{_indent}}}",
            "}",
            string.Empty,
        ];
    }

    private IImmutableList<string> GenerateOptionalValueCode()
    {
        return
        [
            "internal struct OptionalValue<T> where T : struct",
            "{",
            $"{_indent}private readonly T? _value;",
            string.Empty,
            $"{_indent}private readonly InternalOption _type = InternalOption.AutoGenerated;",
            string.Empty,
            $"{_indent}public OptionalValue(T value)",
            $"{_indent}{{",
            $"{_indent}{_indent}_value = value;",
            $"{_indent}{_indent}_type = InternalOption.SpecifiedValue;",
            $"{_indent}}}",
            string.Empty,
            $"{_indent}public OptionalValue(Option opt)",
            $"{_indent}{{",
            $"{_indent}{_indent}_value = default;",
            $"{_indent}{_indent}_type = opt switch",
            $"{_indent}{_indent}{{",
            $"{_indent}{_indent}{_indent}Option.Null => InternalOption.Null,",
            $"{_indent}{_indent}{_indent}Option.AutoGenerated => InternalOption.AutoGenerated,",
            $"{_indent}{_indent}{_indent}_ => throw new NotImplementedException($\"Can not handle {{opt}}\"),",
            $"{_indent}{_indent}}};",
            $"{_indent}}}",
            string.Empty,
            $"{_indent}public static implicit operator OptionalValue<T>(T value)",
            $"{_indent}{{",
            $"{_indent}{_indent}return new OptionalValue<T>(value);",
            $"{_indent}}}",
            string.Empty,
            $"{_indent}public static implicit operator OptionalValue<T>(Option type)",
            $"{_indent}{{",
            $"{_indent}{_indent}return new OptionalValue<T>(type);",
            $"{_indent}}}",
            string.Empty,
            $"{_indent}public T? Unwrap(Func<T> whenAutoGenerated)",
            $"{_indent}{{",
            $"{_indent}{_indent}return _type switch",
            $"{_indent}{_indent}{{",
            $"{_indent}{_indent}{_indent}InternalOption.SpecifiedValue => _value,",
            $"{_indent}{_indent}{_indent}InternalOption.Null => null,",
            $"{_indent}{_indent}{_indent}InternalOption.AutoGenerated => whenAutoGenerated(),",
            $"{_indent}{_indent}{_indent}_ => throw new InvalidOperationException(),",
            $"{_indent}{_indent}}};",
            $"{_indent}}}",
            "}",
            string.Empty,
        ];
    }
}